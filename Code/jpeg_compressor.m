close all
clear all

%% reading image

I = imread('image6.tif');

J=I;
[r,c]=size(J);
Si_a=8*prod(size(I));


%% DCT
N=8;
 
DF=zeros(r,c);
DFF=DF;
IDF=DF;
M=3;
for i= 1 : N : r
    for j= 1 : N : c
            f=J(i:i+N-1,j:j+N-1);
            df=dct2(f);
            DF(i:i+N-1,j:j+N-1)=df;
    end
end

%% Quantization

Q=[16 11 10 16 24 40 51 61;
   12 12 14 19 26 58 60 55;
   14 13 16 24 40 57 69 56;
   14 17 22 29 51 87 80 62;
   18 22 37 56 68 109 103 77;
   24 35 55 64 81 104 113 92;
   49 64 78 87 103 121 120 101;
   72 92 95 98 112 100 103 99];
 
[size1,size2]=size(I);
if(mod(size1,8)==0)
    Ia=size1-8;
else
    Ia=size1-(8+mod(size1,8));
end
if(mod(size2,8)==0)
    Ib=size2-8;
else
    Ib=size2-(8+mod(size2,8));
end
 for i=1:8:Ia
        for j=1:8:Ib
            DF(i:i+7,j:j+7)=DF(i:i+7,j:j+7)./Q;
        end
 end
 DF=round(DF);
 
%% zig zag 

for i=1:8:Ia
        for j=1:8:Ib
            if(i==1 && j==1)
                continue;
            end
            DF(i,j)=DF(i,j)-DF(1,1);
        end
end
Z=zeros(Ia*Ib/64,64);
x=0;
for i=1:8:Ia
        for j=1:8:Ib
            x=x+1;
            A=DF(i:i+7,j:j+7);
            Z(x,:)=[A(1,1),A(1,2),A(2,1),A(3,1),A(2,2),A(1,3),A(1,4),A(2,3),A(3,2),A(4,1),A(5,1),A(4,2),A(3,3),A(2,4),A(1,5),A(1,6),A(2,5),A(3,4),A(4,3),A(5,2),A(6,1),A(7,1),A(6,2),A(5,3),A(4,4),A(3,5),A(2,6),A(1,7),A(1,8),A(2,7),A(3,6),A(4,5),A(5,4),A(6,3),A(7,2),A(8,1),A(8,2),A(7,3),A(6,4),A(5,5),A(4,6),A(3,7),A(2,8),A(3,8),A(4,7),A(5,6),A(6,5),A(7,4),A(8,3),A(8,4),A(7,5),A(6,6),A(5,7),A(4,8),A(5,8),A(6,7),A(7,6),A(8,5),A(8,6),A(7,7),A(6,8),A(7,8),A(8,7),A(8,8)];
        end
end
I1=Z;
%% Encoding and Decoding

A2=[];
P2=[];
for i=1:1:Ia*Ib/64
    a=length(A2);
    A2=encode(I1(i,:),A2);
    P2=decode(A2,P2,a+1,i);
end
L=length(A2);
disp(L);
%% Inverse Zig Zag 

    k=1;
    z=zeros(Ia,Ib);
    for i=1:8:Ia
        for j=1:8:Ib
            P2=I1(k,:);
            P=[P2(1),P2(2),P2(6),P2(7),P2(15),P2(16),P2(28),P2(29);
               P2(3),P2(5),P2(8),P2(14),P2(17),P2(27),P2(30),P2(43);
               P2(4),P2(9),P2(13),P2(18),P2(26),P2(31),P2(42),P2(44);
               P2(10),P2(12),P2(19),P2(25),P2(32),P2(41),P2(45),P2(54);
               P2(11),P2(20),P2(24),P2(33),P2(40),P2(46),P2(53),P2(55);
               P2(21),P2(23),P2(34),P2(39),P2(47),P2(52),P2(56),P2(61);
               P2(22),P2(35),P2(38),P2(48),P2(51),P2(57),P2(60),P2(62);
               P2(36),P2(37),P2(49),P2(50),P2(58),P2(59),P2(63),P2(64)];
            z(i:i+7,j:j+7)=P;
            k=k+1;
        end
    end
    for i=1:8:Ia
        for j=1:8:Ib
            if(i==1 && j==1)
                continue;
            end
            z(i,j)=z(i,j)+z(1,1);
        end
    end
 I2=z;
%% Dequantize

for i=1:8:Ia
        for j=1:8:Ib
            I2(i:i+7,j:j+7)=I2(i:i+7,j:j+7).*Q;
        end
end

%% Inverse DCT

[r1,c1]=size(I2);
DFF=zeros(r1,c1);
for i= 1 : N : r1
    for j= 1 : N : c1
            f=I2(i:i+N-1,j:j+N-1);
            dff=idct2(f);
            DFF(i:i+N-1,j:j+N-1)=dff;
    end
end
   
%% Decompression

A=(DFF/255);

s1=8*prod(size(A));
I=uint8(I);
A=uint8(A);

%F = imsubtract(im2double(I),im2double(A));
%imshow(F);
%imsave;
ra=Si_a/s1;
disp(size(I));
disp(size(A));
disp(ra);








%% Helping Functions

% Encoding function
function [ A2 ] = encode(zig_zag,A2  )
[R,C]=row_col(zig_zag(1));
k=0;
for i=1:1:R
    k=k+2^i;
end

D1=dec_to_bin(k);
D2=dec_to_bin(C);
A2=insert_to_array(A2,D1,-1,1);
A2=insert_to_array(A2,D2,R,1);
zeroes=0;
for i=2:1:length(zig_zag)
    if zig_zag(i)==0
        zeroes=zeroes+1;
    else
        [R,C]=row_col(zig_zag(i));
        if(zeroes<16)
            A2=insert_to_array(A2,R_Z(R,zeroes),-1,2);
            A2=insert_to_array(A2,dec_to_bin(C),R,2);
        else
            for l=1:1:floor(zeroes/15)
                A2=insert_to_array(A2,11111111001,-1,2);
            end
            zeroes=zeroes-(floor(zeroes/15)*15);
            A2=insert_to_array(A2,R_Z(R,zeroes),-1,2);
            A2=insert_to_array(A2,dec_to_bin(C),R,2);
        end
        zeroes=0;
    end
end
if zeroes~=0
    A2=insert_to_array(A2,1010,-1,2);
end

end
 
% Decoding Function

function [ P2,m ] = decode( P,P2,m,p2 )

len=length(P);
cunt=0;
for j=m:len
    [row_no,zeroes]=check_coeff(P(m:j),0);
    if row_no~=-1
        col_no=0;k=0;
        temp=P(j+1:j+row_no);
        for i=length(temp):-1:1
            col_no=col_no+temp(i)*2^k;
            k=k+1;
        end
        if(col_no<abs((2^row_no)-1)-abs((2^(row_no-1))-1))
            P2(p2,cunt+1)=-((2^row_no)-1)+col_no;
            cunt=cunt+1;
        elseif(row_no==0 && col_no==0)
            j=j+1;
            P2(p2,cunt+1)=0;
            cunt=cunt+1;
        else
            P2(p2,cunt+1)=((2^(row_no-1))-1)+col_no-(abs((2^row_no)-1)-abs((2^(row_no-1))-1))+1;
            cunt=cunt+1;
        end
        break;
    end
end

i=j+1+row_no;

for j=i:1:len
    [row_no,zeroes]=check_coeff(P(i:j),1);
    if row_no~=-1
        if((j-i)==10 & P(i:j)==[1,1,1,1,1,1,1,1,0,0,1])
            P2(p2,cunt+15)=0;
            cunt=cunt+15;
            i=j+1;
        else
            col_no=0;k=0;
            temp=P(j+1:j+row_no);
            for i=length(temp):-1:1
                col_no=col_no+temp(i)*2^k;
                k=k+1;
            end
            if(zeroes>0)
                P2(p2,cunt+zeroes)=0;
            end
            cunt=cunt+zeroes;
            if(col_no<abs((2^row_no)-1)-abs((2^(row_no-1))-1))
                P2(p2,cunt+1)=-((2^row_no)-1)+col_no;
                cunt=cunt+1;
            else
                P2(p2,cunt+1)=((2^(row_no-1))-1)+col_no-(abs((2^row_no)-1)-abs((2^(row_no-1))));
                cunt=cunt+1;
            end
            i=j+1+row_no;
        end
    elseif ((j-i)==10 & P(i:j)==[1,1,1,1,1,1,1,1,0,0,1])
        P2(p2,cunt+15)=0;
        cunt=cunt+15;
        i=j+1;
    elseif ((j-i)==3 & P(i:j)==[1,0,1,0])
        P2(p2,64)=0;
        m=j+1;
    end 
end

end

function [ row_no,zeroes ] = check_coeff( a,t)
AC_coeff=[00,01,100,1011,11010,1111000,11111000,1111110110,1111111110000010,1111111110000011;
    1100,11011,1111001,111110110,11111110110,1111111110000100,1111111110000101,1111111110000110,1111111110000111,1111111110001000;
    11100,11111001,1111110111,111111110100,1111111110001001,1111111110001010,1111111110001011,1111111110001100,1111111110001101,1111111110001110;
    111010,111110111,111111110101,1111111110001111,1111111110010000,1111111110010001,1111111110010010,1111111110010011,1111111110010100,1111111110010101;
    111011,1111111000,1111111110010110,1111111110010111,1111111110011000,1111111110011001,1111111110011010,1111111110011011,1111111110011100,1111111110011101;
    1111010,11111110111,1111111110011110,1111111110011111,1111111110100000,1111111110100001,1111111110100010,1111111110100011,1111111110100100,1111111110100101;
    1111011,111111110110,1111111110100110,1111111110100111,1111111110101000,1111111110101001,1111111110101010,1111111110101011,1111111110101100,1111111110101101;
    11111010,111111110111,1111111110101110,1111111110101111,1111111110110000,1111111110110001,1111111110110010,1111111110110011,1111111110110100,1111111110110101;
    111111000,111111111000000,1111111110110110,1111111110110111,1111111110111000,1111111110111001,1111111110111010,1111111110111011,1111111110111100,1111111110111101;
    111111001,1111111110111110,1111111110111111,1111111111000000,1111111111000001,1111111111000010,1111111111000011,1111111111000100,1111111111000101,1111111111000110;
    111111010,1111111111000111,1111111111001000,1111111111001001,1111111111001010,1111111111001011,1111111111001100,1111111111001101,1111111111001110,1111111111001111;
    1111111001,1111111111010000,1111111111010001,1111111111010010,1111111111010011,1111111111010100,1111111111010101,1111111111010110,1111111111010111,1111111111011000;
    1111111010,1111111111011001,1111111111011010,1111111111011011,1111111111011100,1111111111011101,1111111111011110,1111111111011111,1111111111100000,1111111111100001;
    11111111000,1111111111100010,1111111111100011,1111111111100100,1111111111100101,1111111111100110,1111111111100111,1111111111101000,1111111111101001,1111111111101010;
    1111111111101011,1111111111101100,1111111111101101,1111111111101110,1111111111101111,1111111111110000,1111111111110001,1111111111110010,1111111111110011,1111111111110100;
    1111111111110101,1111111111110110,1111111111110111,1111111111111000,1111111111111001,1111111111111010,1111111111111011,1111111111111100,1111111111111101,1111111111111110];

DC_coeff=[0,2,6,14,30,62,126,254,510,1022,2046,4094,8190,16382,32766,65534,131070];
s=0;j=0;
for i=length(a):-1:1
    s=s+a(i)*2^j;
    j=j+1;
end

zeroes=-1;
if (t==0)
    for i=1:1:length(DC_coeff)
        if (DC_coeff(i)==s)
            row_no=i-1;
            break;
        else
            row_no=-1;
        end
    end
end
if (t==1)
    for i=1:16
        for j=1:10
            A=[];
            A=insert_to_array(A,AC_coeff(i,j),-1,2);
            if((length(A)==length(a)) & (A==a))
                row_no=j;
                zeroes=i-1;
                break;
            else
                row_no=-1;
            end
        end
        if row_no~=-1
            break;
        end
    end
end
end


function [ s ] = dec_to_bin(k)
i=0;
s=0;
if(k>=1)
    while(k>=1)
        j=10^i;
        r=mod(k,2);
        k=floor(k/2);
        s=(r*j)+s;
        i=i+1;
    end
    
elseif (k==0)
    s=0;
end
end

function [ A ] = insert_to_array( A,s,r,t)
len=length(A);
if(t==1)  
    if(r==-1)
        
        if(s==0)
            A(len+1)=0;
        else
            len=len+count(s);
        end
    else
        if(r>0)
            if(s==0)
                A(len+r)=0;
            else
                len=len+r;
            end
        else
            A(len+1)=0;
        end
    end
end
if(t==2)
    if(r==-1)
        if(s==0)
            A(len+2)=0;
        elseif(s==1)
            A(len+1)=0;
            len=length(A)+count(s);
        else
            len=len+count(s);
        end
    else
        if(s==0)
            A(len+r)=0;
        else
            len=len+r;
        end
    end
end
while(s>0)
   A(len)=mod(s,10);
   s=floor(s/10);
   len=len-1;
end
end

function [ R,C ] = row_col( value )
R=0;
for i=-11:1:11
    k=2^i;
    if (k==abs(value))
        R=i+1;
        break;
    elseif (k>abs(value) && abs(value)>0)
        R=i;
        break;
    end
end
C=0;
if (value>0)
    C=((2^R)-1)-((2^(R-1))-1)+(value-((2^(R-1))-1));
elseif (value<0)
    C=((2^R)-1)-abs(value)+1;
else
    C=1;
end
C=C-1;
end

function [ s ] = count(x)
s=0;
while(x>0)
    s=s+1;
    x=floor(x/10);
end
end

function [ k ] = R_Z( X,Y )
AC_coeff=[00,01,100,1011,11010,1111000,11111000,1111110110,1111111110000010,1111111110000011;
    1100,11011,1111001,111110110,11111110110,1111111110000100,1111111110000101,1111111110000110,1111111110000111,1111111110001000;
    11100,11111001,1111110111,111111110100,1111111110001001,1111111110001010,1111111110001011,1111111110001100,1111111110001101,1111111110001110;
    111010,111110111,111111110101,1111111110001111,1111111110010000,1111111110010001,1111111110010010,1111111110010011,1111111110010100,1111111110010101;
    111011,1111111000,1111111110010110,1111111110010111,1111111110011000,1111111110011001,1111111110011010,1111111110011011,1111111110011100,1111111110011101;
    1111010,11111110111,1111111110011110,1111111110011111,1111111110100000,1111111110100001,1111111110100010,1111111110100011,1111111110100100,1111111110100101;
    1111011,111111110110,1111111110100110,1111111110100111,1111111110101000,1111111110101001,1111111110101010,1111111110101011,1111111110101100,1111111110101101;
    11111010,111111110111,1111111110101110,1111111110101111,1111111110110000,1111111110110001,1111111110110010,1111111110110011,1111111110110100,1111111110110101;
    111111000,111111111000000,1111111110110110,1111111110110111,1111111110111000,1111111110111001,1111111110111010,1111111110111011,1111111110111100,1111111110111101;
    111111001,1111111110111110,1111111110111111,1111111111000000,1111111111000001,1111111111000010,1111111111000011,1111111111000100,1111111111000101,1111111111000110;
    111111010,1111111111000111,1111111111001000,1111111111001001,1111111111001010,1111111111001011,1111111111001100,1111111111001101,1111111111001110,1111111111001111;
    1111111001,1111111111010000,1111111111010001,1111111111010010,1111111111010011,1111111111010100,1111111111010101,1111111111010110,1111111111010111,1111111111011000;
    1111111010,1111111111011001,1111111111011010,1111111111011011,1111111111011100,1111111111011101,1111111111011110,1111111111011111,1111111111100000,1111111111100001;
    11111111000,1111111111100010,1111111111100011,1111111111100100,1111111111100101,1111111111100110,1111111111100111,1111111111101000,1111111111101001,1111111111101010;
    1111111111101011,1111111111101100,1111111111101101,1111111111101110,1111111111101111,1111111111110000,1111111111110001,1111111111110010,1111111111110011,1111111111110100;
    1111111111110101,1111111111110110,1111111111110111,1111111111111000,1111111111111001,1111111111111010,1111111111111011,1111111111111100,1111111111111101,1111111111111110];

k=AC_coeff(Y+1,X);

end

    